using Microsoft.VisualStudio.TextTemplating;
using System;
using System.IO;

namespace NRestGen.TextTemplate
{
    public abstract class NRestGenTemplate : TextTransformation
    {
        private ITextTemplatingEngineHost _host;

        public void Initialize(EnvDTE.DTE dte, ITextTemplatingEngineHost host, string resourceModelFile)
        {
            _host = host;
            MultiFile = MultiFileManager.Create(dte, host, GenerationEnvironment);
            MultiFile.Header = $@"// This code is generated by RestGen v1.0.0.
// Any changes to this file will be overwritten when regenerated.
// Generated at {DateTime.Now}
";

            GenerationEnvironment.AppendLine($"Generated at {DateTime.Now}");

            if (!String.IsNullOrEmpty(MultiFile.Error))
            {
                Error(MultiFile.Error);
            }

            var resourceModelPath = Path.Combine(ProjectFolder, resourceModelFile);
            GenerationEnvironment.AppendLine($"Reading Resource Model: {resourceModelPath}");
            ResourceModel = ResourceObjectModel.FromFile(resourceModelPath);
        }

        public ResourceObjectModel ResourceModel { get; private set; }

        private string _projectFolder;
        public string ProjectFolder
        {
            get
            {
                if (String.IsNullOrEmpty(_projectFolder))
                {
                    _projectFolder = Path.GetDirectoryName(_host.TemplateFile);
                }

                return _projectFolder;
            }
        }

        private string _targetNamespace;
        public string TargetNamespace
        {
            get
            {
                if (MultiFile == null) { return String.Empty; }

                if (_targetNamespace == null)
                {
                    _targetNamespace = MultiFile.GetCustomToolNamespace(_host.TemplateFile);
                    if (String.IsNullOrEmpty(_targetNamespace)) { _targetNamespace = MultiFile.DefaultProjectNamespace; }
                }
                return _targetNamespace;
            }
        }

        public MultiFileManager MultiFile { get; private set; }

        public string BuildPath(string fileName, string relativeFolders = "")
        {
            var directory = Path.Combine(ProjectFolder, relativeFolders.Replace("/", "\\"));
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
            return Path.Combine(directory, fileName);
        }

        public void Process()
        {
            MultiFile.Process(true);
            GenerationEnvironment.AppendLine("Done.");
        }

        public static EnvDTE.DTE GetDevEnv(ITextTemplatingEngineHost host)
        {
            return (EnvDTE.DTE)((IServiceProvider)host).GetService(typeof(EnvDTE.DTE));
        }
    }
}
