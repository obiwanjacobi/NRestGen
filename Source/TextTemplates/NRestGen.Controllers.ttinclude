<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="$(TargetDir)NRestGen.TextTemplate.dll" #>
<#@ assembly name="EnvDTE"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="NRestGen.TextTemplate" #>
<#+ 
private void GenerateControllers()
{
    string controllerNamespace = ResourceModel.Settings.Project.Controllers;
    string resourceModelNamespace = ResourceModel.Settings.Project.ResourceModel;

    foreach (var entity in ResourceModel.Entities)
    {
        var path = BuildPath(entity.SetName + "Controller.generated.cs", controllerNamespace);
#>
Generate <#=entity.Name#> Controller: <#=path#>
<#+ 
        MultiFile.StartNewFile(path);
#>
<#+     if (UseMediatr) { #>
using MediatR;
<#+     } // if #>
<#+     if (UseOData) { #>
using NRestGen.OData;
using Microsoft.AspNet.OData;
using Microsoft.AspNet.OData.Query;
<#+     } // if #>
using Microsoft.AspNetCore.Mvc;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using <#=TargetNamespace#>.<#=resourceModelNamespace#>;

namespace <#=TargetNamespace#>.<#=controllerNamespace#>
{
    /// <summary>
    /// Handles resource requests for the <#=entity.Name#> type.
    /// </summary>
    [ApiController]
    [ApiVersion("<#=ResourceModel.Settings.Api.Version#>")]
    //[Route("<#=ResourceModel.Settings.Api.BaseUrl#>/v{v:apiVersion}/[controller]")]
    [Route("<#=ResourceModel.Settings.Api.BaseUrl#>/[controller]")]
    public partial class <#=entity.SetName#>Controller : ControllerBase
    {
<#+     if (UseMediatr) { #>
        private readonly IMediator _mediator;

        public <#=entity.SetName#>Controller(IMediator mediator)
        {
            _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));
        }
<#+     } // if #>

        [HttpHeadGet("{id?}")]
<#+     if (UseODataQueryable) { #>
        [EnableQuery]
<#+     } 
        if (UseODataNotQueryable) { #>
        public async Task<IActionResult> Get(CancellationToken cancellationToken, ODataQueryOptions<<#=entity.Name#>> options, int? id = null)
        {
            //options.Validate(new ODataValidationSettings());
<#+     } else { #>
        public async Task<IActionResult> Get(CancellationToken cancellationToken, int? id = null)
        {
<#+     } // if #>
<#+     if (UseMediatr) { #>
            var request = new GetRequest<<#=entity.Name#>>(<#=UseODataNotQueryable ? "options, " : ""#>id.GetValueOrDefault());
            var response = await _mediator.Send(request, cancellationToken);
<#+     } else { #>
            var request = new Request<<#=entity.Name#>>(<#=UseODataNotQueryable ? "options, " : ""#>id.GetValueOrDefault());
            var response = await Handle(request, cancellationToken);
<#+     } // if-else UseMediatr #>
<#+     if (UseODataQueryable) { #>
            return Ok(response.Results.AsQueryable());
<#+     } else { #>
            ResolveLinks(options, response);
            return Ok(response);
<#+     } // if #>
        }
<#+ 
        if (ResourceModel.Relations.ContainsKey(entity.Name))
        { 
            var relations = ResourceModel.Relations[entity.Name];
            foreach(var relation in relations) 
            {
#>
        
        [HttpHeadGet("{id}/<#=relation.SetName#>")]
<#+             if (UseODataQueryable) { #>
        [EnableQuery]
<#+             } 
                if (UseODataNotQueryable) { #>
        public async Task<IActionResult> Get<#=relation.SetName#>(CancellationToken cancellationToken, ODataQueryOptions<<#=relation.Name#>> options, int id)
        {
            //options.Validate(new ODataValidationSettings());
<#+             } else { #>
        public async Task<IActionResult> Get<#=relation.SetName#>(CancellationToken cancellationToken, int id)
        {
<#+             } // if-else
                if (UseMediatr) { #>
            var request = new GetRequest<<#=relation.Name#>>(<#=UseODataNotQueryable ? "options" : ""#>)
            {
                ParentId = new ResourceIdentifier(typeof(<#=entity.Name#>), id),
            };
            var response = await _mediator.Send(request, cancellationToken);
<#+             } else { #>
            var request = new Request<<#=relation.Name#>>(<#=UseODataNotQueryable ? "options" : ""#>)
            {
                ParentId = new ResourceIdentifier(typeof(<#=entity.Name#>), id),
            };
            var response = await Handle(request, cancellationToken);
<#+             } // if-else #>
<#+             if (UseODataQueryable) { #>
            return Ok(response.Results.AsQueryable());
<#+             } else { #>
            ResolveLinks(options, response);
            return Ok(response);
<#+             } // if #>
        }
<#+         }
        } // foreach-relation/if #>

        private void ResolveLinks<T>(ODataQueryOptions options, Response<T> response)
            where T : class
        {
            var resolver = new LinkTableResolver();
            response.Links = resolver.Resolve(Request, options, response.Links);
        }
    }
}
<#+ 
        MultiFile.EndBlock();
    } // foreach-entity
}
#>